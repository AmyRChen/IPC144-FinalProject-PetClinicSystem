/*
*****************************************************************************
                        Assignment 1 - Milestone 2
Full Name  : Ping-Ju, Chen
Student ID#: 151043205
Email      : pchen72@myseneca.ca
Section    : NAA

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*****************************************************************************
*/


1.
When naming a module or library, here are some factors I must consider about :

    1. The name of the module must be recognizable and functionally organized. 
    Due to declarations for separate subprograms should be in separate header 
    files, a module with a name that specifies its usage and self-descriptive 
    could help us understand the functions or definitions it may include. In 
    this case, looking at the name of the header file and implementation file 
    could help us roughly know the purpose of the module. It shows better 
    readability and is easy for future upgrade work.

    2. We should avoid the module filename being identical or similar to the 
    system directory filenames. It will confuse other programmers.

    3. It will be explicit if the header and source code files share the same 
    name within a module. Additionally, we should always name the file with 
    the correct suffix. In other words, we could identify them by the suffix 
    with the  ".c" or ".h" extension.

From my standpoint, there are several reasons for the library's header and 
source code files using the same name. Firstly, it's a straightforward way to 
name the relative files. The header file is like a bridge to the library. When 
we're trying to understand the program, using the same name helps us easy to 
link them together. Secondly, we usually have to manage more files in a larger 
project. The header and source code files sharing the same name would be a 
better organization. In this way, we could find them quickly and also enhance 
maintainability. It will be messy and less readable if we name the files 
differently. 
For example, we could distinguish the "core.h" and "clinic.h" by looking at the 
filename. The "core" module should include the core functions that are fundamental 
helper functions for other modules. These functions could validate the user input 
or check whether the input value is in the specified range or not. On the other 
hand, the "clinic" module includes the clinic management functions that help 
veterinarian clinic operations. Additionally, we could tell the "clinic.c" file 
is related to the "clinic.h" file, and they're in the same module without being 
confused with "core" modules. 

---
2. The two modules that I've already created are the "core" and "clinic" modules. 
In the assignment, the different module has different usage. The functions in the 
"core" module are used to validate the user input. Then print the corresponding 
message in the different situations. The "clinic" module is related to the clinic 
operation. These functions implement the way to manage the patient data.
The reason these modules aren't combined is because of modular design. I could 
code each module separately and assemble various modules into a complete program 
in the modular design. In this way, I can decompose a problem and sub-divide a 
programming project. The program could be implemented step by step with a clear 
structure. Additionally, the different module has their own mission, a highly 
cohesive and low coupling module is a preferred design. It means the module 
should perform a single task and lower the interrelatedness with other modules.
Here are the advantages of maintaining them separately:
    1. To simplify the complexity of the original problem. Keep the program in a 
    size that we could handle easily so that each module focuses on a narrow aspect 
    of the project.
    
    2. A well-organized program should keep our code readable, easy to maintain, 
    and upgrade. When it comes to a large project, it's convenient for teamwork. 
    In addition, this way makes our program structure clear.

    3. Improve the reusability. The module may be used as part of the solution to 
    some other problem or be accessed multiple times in a complete program. 
    Enhancing the reusability could reduce the redundancy of the code.

For example, the "core" module can validate the user input, so the "clinic" module 
refers to those functions several times. If another module also has to validate the 
user input, I could reuse the "core" module too! It helps me lessen the redundant 
part of code. Moreover, the functions in the "core" module have a different purpose 
from the "clinic" module. These two independent modules make it more clear to 
understand the program structure.

---
3. The goal that we typically divide a module into a header file and an implementation 
file is to declare and define the functions separately. To achieve the modular design, 
clarify the program structure and make the program easy to understand and maintain by 
others.
Splitting a module into a header file and a matching source file has benefits. Firstly, 
it's easier for management. We don't have to define all the functions in the same file. 
Hence, it won't lead to the file containing too much code, which is hard to upgrade and 
increase the complexity. Secondly, it's more efficient. It only takes time to re-compile 
the adjustment part instead of the whole program when you edit the code. Thus, splitting 
a module into ".c" and ".h" files could improve the compile time. In addition, if we're 
doing a project which includes more source files and several team members involved. The 
program could know the declaration of this function in the header file speedily. It also 
helps when others have to understand the contents of different modules, the prototype 
helps to clarify the functions, and it's more readable.
The header file "clinic.h" is an interface to the module. It includes the function 
prototypes, structure definition, and macro definition related to the clinic operation. 
The program "a1ms2.c" that #include the header file can know about the functions and types. 
The matching source file "clinic.c" is the implementation file, which contains the logic 
of those functions. Take function "menuMain" as an example: the function prototype is 
organized with comments and categories in the "clinic.h" file properly. We could know the 
return value and the parameter of this function by looking at the header file. The main 
program "a1ms2.c" file includes the "clinic.h" file as a port, then the function "menuMain" 
can be used in the program. In this case, the program structure is clear, and we can edit 
the function in the implementation file centrally.
